<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>TodoApp List</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.6.1.min.js"
    integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="/todo-app/public/main.css">
</head>

<body>

  <!-- nav.html을 첨부해주세요 -->
  <%- include("nav.html") %>

    <!-- my-3 => mt-3 + mb-3 / mx-3 => ml-3 + mr-3-->
    <div class="container mt-3">
      <h4 class="ml-2 my-3 text-center">할 일 리스트</h4>

      <!-- POST요청의 대용품인 query string 작성방법 => url(localhost:8080/list?데이터이름=데이터값) -->
      <div class="input-group mb-2">
        <input class="form-control" id="search-input">
        <button class="input-group-append btn btn-danger" id="search">검색</button>
      </div>

      <script>
        // 검색버튼 누르면 서버로 GET요청합시다 + query string으로 정보전달도
        $("#search").click(() => {
          // <input>에 유저가 입력한 값
          const 입력한값 = $("#search-input").val()
          // 현재 페이지 url 바꾸는 법 => window.location.replace("url")
          // ("url") => 실은 GET요청이랑 똑같음
          // const 자료 = { 이름1: "값1", 이름2: "값2" };
          // window.location.replace(`/search?value=${ $.param(자료) }`);
          window.location.replace(`/search?value=${입력한값}`);
        })

          // js로 query string 만들 때 이런거 쓰면 쉬움
          // 1. ?뒤에 오는 query string을 나열해줌
          // $.param(자료) // 이름1=값1&이름2=값2 나열해줌

          // 2. 폼태그 안에 있는 모든 name속성들의 모든 input들을 query string으로 나열해줌
          // 다만 <input>에 name 속성이 있어야함
          // $(폼태그).serialize();
      </script>

      <ul class="list-group">
        <% for ( let i=0; i < posts.length; i++) { %>
          <li class="list-group-item">
            <p>
              글번호 : <%= posts[i]._id %>
            </p>
            <h4>
              <a href="/detail/<%=posts[i]._id%> ">
                할 일 제목 : <%= posts[i].제목%>
              </a>
            </h4>
            <p>
              할 일 마감날짜 : <%= posts[i].날짜%>
            </p>
            <!-- data-id에 database에 저장된 id값 부여하기 -->
            <button class="btn btn-danger delete" data-id="<%= posts[i]._id %>">삭제</button>
            <button class="btn btn-secondary chat" data-id="<%= posts[i].작성자 %>">채팅</button>
          </li>
          <% } %>
      </ul>
    </div>

    <script>
      // AJAX 기본 문법
      // $.ajax({
      //   method: "DELETE",
      //   url: "요청할경로",
      //   data: "요청과 함께 보낼데이터"
      // })
      $(".delete").click(function (e) {
        // click한 element의 data가 id인 값
        // data-?? 값이면 e.target.dataset.??
        const 글번호 = e.target.dataset.id;
        // e.target = 지금 클릭한 것 / this = 지금 이벤트 동작하는 곳
        // this 쓸 때는 화살표함수 쓰면 안됨
        const 지금누른거 = $(this);

        $.ajax({
          method: "DELETE",
          url: "/delete",
          data: { _id: 글번호 }
        }).done((result) => {
          // 서버에서 응답안해주면 성공했을 때 or 실패했을 때의 코드가 실행이 안되니까 꼭 서버에서 응답해줘야함
          // AJAX 성공 시 페이지를 강제로 새로고침 해주세요
          // OR
          // 삭제버튼을 누른 <li> 요소를 제거해주세요 or 안 보이게 해주세요
          console.log("성공했어염");
          // 근데 done() 안에서는 화살표함수를 써야 this값의 변형없이 잘됨 function 사용한 곳 기준으로 this값이 변경되나?
          // function 문법을 쓰면 그거 안에 있는 this 라는 키워드의 값이 맨날 재정의가 됩니다 함수가 있던 object자료로 재정의가 되는데 그냥 쉽게 말하면 이벤트리스너안에서 쓰면 this는 '이벤트동작하는곳'으로 재정의가 됩니다 ()=>{} 문법을 쓰면 그거 안의 this라는 키워드의 값을 재정의하지 않고 바깥에있던거 그대로 씁니다
          지금누른거.parent("li").fadeOut();
          // $(this).parent("li").fadeOut();
        }).fail((xhr, textStatus, errorThrown) => {
          // AJAX 실패 시 실행할 코드
          console.log(xhr)
          console.log(textStatus)
          console.log(errorThrown)
        })
      })


      $(".chat").click((e) => {
        const id = e.target.dataset.id;
        $.post("/chatroom", { 채팅당한사람id: id }).then(() => {
          console.log("성공했어염");
        })
      })

      // $(".chat").click((e) => {
      //   const id = e.target.dataset.id;
      //   $.ajax({
      //     method: "POST",
      //     url: "/chatroom",
      //     data: {
      //       채팅당한사람id: id
      //     }.done((result) => {
      //       console.log("성공했어염");
      //     }).fail((xhr, textStatus, errorThrown) => {
      //       // AJAX 실패 시 실행할 코드
      //       console.log(xhr)
      //       console.log(textStatus)
      //       console.log(errorThrown)
      //     })
      //   })
      // })

    </script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
      crossorigin="anonymous"></script>
</body>

</html>