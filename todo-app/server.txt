const express = require("express");
const app = express();
app.use(express.urlencoded({ extended: true }));

const http = require("http").createServer(app);
const { Server } = require("socket.io");
const io = new Server(http);


require("dotenv").config();


const MongoClient = require("mongodb").MongoClient;

let db; 
MongoClient.connect(
  process.env.DB_URL,
  { useNewUrlParser: true },
  (err, client) => {
    if (err) {
      return console.log(err);
    }
    db = client.db("todoapp"); 
    http.listen(process.env.PORT, () => {
      console.log("listening on 8080");
    });
  }
);

app.get("/socket", (req, res) => {
  res.render("socket.ejs")
})

io.on("connection", (socket) => {
  console.log("유저접속됨");


  socket.on("joinroom", (data) => {
    socket.join("room1");
    console.log("room1입장");
  })

  socket.on("room1-send", (data) => {
    io.to("room1").emit("broadcast", data);
  })


  socket.on("user-send", (data) => {
    console.log(data);
    io.emit("broadcast", data);
  })
})


const { ObjectId } = require("mongodb");

app.set("view engine", "ejs");

app.use("/todo-app/public", express.static("public"));

const methodOverride = require("method-override");
app.use(methodOverride("_method"));

app.get("/", (req, res) => {
  res.render("index.ejs");
});
app.get("/write", (req, res) => {
  res.render("write.ejs");
});

app.get("/list", (req, res) => {
  db.collection("post")
    .find()
    .toArray((err, result) => {
      res.render("list.ejs", { posts: result });
    });
});

app.get("/search", (req, res) => {
  console.log(req.query);
  const 검색조건 = [
    {
      $search: {
        index: "titleSearch",
        text: {
          query: req.query.value,
          path: "제목",
        },
      },
    },
    { $project: { 제목: 1, _id: 0, score: { $meta: "searchScore" } } },
    { $sort: { _id: 1 } },
    { $limit: 2 },
  ];
  db.collection("post")
    .aggregate(검색조건)
    .toArray((err, result) => {
      console.log(result);
      res.render("search.ejs", { posts: result });
    });
});

app.get("/detail/:id", (req, res) => {
  db.collection("post").findOne(
    { _id: parseInt(req.params.id) },
    (err, result) => {
      if (err) {
        return console.log(err);
      }
      console.log(result);
      res.render("detail.ejs", { data: result });
    }
  );
});

app.get("/edit/:id", (req, res) => {
  db.collection("post").findOne(
    { _id: parseInt(req.params.id) },
    (err, result) => {
      if (err) {
        return console.log(err);
      }
      console.log(result);
      res.render("edit.ejs", { post: result });
    }
  );
});

const passport = require("passport");
const LocalStrategy = require("passport-local").Strategy;
const session = require("express-session");

app.use(
  session({ secret: "비밀코드", resave: true, saveUninitialized: false })
);
app.use(passport.initialize()); 
app.use(passport.session());

app.get("/login", (req, res) => {
  res.render("login.ejs");
});

app.post(
  "/login",
  passport.authenticate("local", {
    failureRedirect: "/fail",
  }),
  (req, res) => {
    res.redirect("/");
  }
);

app.get("/fail", (req, res) => {
  res.send("로그인에 실패하셨습니다.");
});

app.get("/mypage", 로그인했니, (req, res) => {
  console.log(req.user);
  res.render("mypage.ejs", { 사용자: req.user });
});

function 로그인했니(req, res, next) {
  if (req.user) {
    next();
  } else {
    res.send("로그인안하셨는데요?");
  }
}

passport.use(
  new LocalStrategy(
    {
      usernameField: "id",
      passwordField: "pw",
      session: true,
      passReqToCallback: false,
    },
    (입력한아이디, 입력한비번, done) => {
      console.log(입력한아이디, 입력한비번);
      db.collection("login").findOne({ id: 입력한아이디 }, (err, result) => {
        if (err) return done(err);
        if (!result)
          return done(null, false, { message: "존재하지 않는 아이디요" });
        if (입력한비번 === result.pw) {
          return done(null, result);
        } else {
          return done(null, false, { message: "비번틀렸어요" });
        }
      });
    }
  )
);

passport.serializeUser((user, done) => {
  done(null, user.id);
});
passport.deserializeUser((아이디, done) => {
  db.collection("login").findOne({ id: 아이디 }, function (err, result) {
    done(null, result);
  });
});

app.post("/register", (req, res) => {
  const register_id = req.body.id;
  const register_pw = req.body.pw;
  db.collection("login").findOne({ id: register_id }, (err, result) => {
    if (result === null) {
      db.collection("login").insertOne(
        { id: register_id, pw: register_pw },
        (err, result) => {
          res.send(
            "<script>alert(`회원가입이 완료되었습니다.`); window.location.replace(`/login`)</script>"
          );
        }
      );
    } else {
      res.send(
        "<script>alert(`이미 존재하는 아이디입니다`); window.location.replace(`/login`)</script>"
      );
    }
  });
});

app.post("/add", (req, res) => {
  res.send("전송완료");
  console.log(req.body);
  console.log(req.body.title);
  db.collection("counter").findOne({ name: "게시물갯수" }, (err, result) => {
    console.log(result.totalPost);
    const 총게시물갯수 = result.totalPost;

    console.log(req.user);
    const saveData = {
      _id: 총게시물갯수 + 1,
      작성자: req.user._id,
      제목: req.body.title,
      날짜: req.body.date,
    };

    db.collection("post").insertOne(saveData, (err, result) => {
      console.log("저장완료");
      db.collection("counter").updateOne(
        { name: "게시물갯수" },
        { $inc: { totalPost: 1 } },
        (err, result) => {
          if (err) {
            return console.log(err);
          }
        }
      );
    });
  });
});

app.delete("/delete", (req, res) => {
  console.log(req.body);
  req.body._id = parseInt(req.body._id);
  const deleteData = {
    _id: req.body._id,
    작성자: req.user._id,
  };

  db.collection("post").deleteOne(deleteData, (err, result) => {
    console.log("삭제완료");
    if (result) {
      console.log(result);
    }
    res.status(200).send({ message: "성공했습니다" });
  });
});

app.put("/edit", (req, res) => {

  const id = parseInt(req.body.id);
  const title = req.body.title;
  const date = req.body.date;

  const editData = {
    _id: id,
    작성자: req.user._id,
  };

  db.collection("post").updateOne(
    editData,
    { $set: { 제목: title, 날짜: date } },
    (err, result) => {
      console.log("수정완료");
      res.redirect("/list");
    }
  );
});

app.use("/shop", require("./routes/shop.js"));

app.use("/board/sub", require("./routes/board.js"));


const multer = require("multer");

var path = require("path");

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./public/img");
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const upload = multer({ storage: storage });

app.get("/upload", (req, res) => {
  res.render("upload.ejs");
});

app.post("/upload", upload.single("profile"), (req, res) => {
  res.send("업로드완료");
});

app.get("/img/:imgName", (req, res) => {
  res.sendFile(__dirname + "/public/img/" + req.params.imgName);
});

app.post("/chatroom", 로그인했니, (req, res) => {
  const saveData = {
    title: "무슨무슨채팅방",
    member: [ObjectId(req.body.채팅당한사람id), req.user._id],
    data: new Date(),
  };

  db.collection("chatroom")
    .insertOne(saveData)
    .then((result) => {
      res.send("채팅데이터 저장 성공했습니다.");
    });
});

app.get("/chat", 로그인했니, (req, res) => {
  db.collection("chatroom")
    .find({ member: req.user._id })
    .toArray()
    .then((result) => {
      res.render("chat.ejs", { data: result });
    });
});

app.post("/message", 로그인했니, (req, res) => {
  const saveData = {
    parent: ObjectId(req.body.parent),
    content: req.body.content,
    userid: req.user._id,
    date: new Date(),
  };

  db.collection("message")
    .insertOne(saveData)
    .then(() => {
      console.log("DB저장성공");
      res.send("DB저장성공");
    })
    .catch(() => {
      console.log("DB저장실패");
    });
});

app.get("/message/:id", 로그인했니, function (req, res) {
  res.writeHead(200, {
    Connection: "keep-alive",
    "Content-Type": "text/event-stream",
    "Cache-Control": "no-cache",
  });

  console.log(req.params.id);
  db.collection("message")
    .find({ parent: ObjectId(req.params.id) })
    .toArray()
    .then((result) => {
      console.log("채팅가져오기성공");
      res.write("event: test\n");
      res.write(`data: ${ JSON.stringify(result) }\n\n`);
    });

  const 찾을문서 = [
    { $match: { "fullDocument.parent": ObjectId(req.params.id) } },
  ];
  const changeStream = db.collection("message").watch(찾을문서);
  changeStream.on("change", (result) => {
    console.log("값이 변경됨");
    console.log(result.fullDocument);
    res.write("event: test\n");
    const 추가된문서 = [result.fullDocument];
    res.write(`data: ${ JSON.stringify(추가된문서) }\n\n`);
  });
});
