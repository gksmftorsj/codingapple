jQuery 
=> .eq()
js
=> .at()
=> 문자열 알파벳 순서대로 정렬하기 -> const answer = "cba".toLowerCase(); -> answer.split("").sort().join("")


innerHTML 대신 createElement 사용하면 
1. 최적화 => DocumentFragment를 사용하면 DocumentFragment에대가 자식엘리먼트를 미리 다 추가한 뒤 DOM에 업데이트할 준비가 되면 한 번에 선택한 태그에 추가함으로써 DOM 조작 횟수를 최소화 할 수 있다. DocumentFragment는 기본적으로 DOM과 동일하게 동작하지만, HTML의 DOM 트리에는 영향을 주지 않으며, 메모리에서만 정의된다.
https://7942yongdae.tistory.com/70
2. 보안(cross-site scripting xss 방어 가능)에 유리
 => https://www.youtube.com/watch?v=ILcu32Nkq_I
const processUserInput = () => {
	const rawData = document.querySelector("input").value;
	const h1 = document.querySelector("h1");
	h1.innerHTML = rawData;
} => createElement없이 innerHTML만 사용하면 cross-site scripting xss 방어 불가능

but
const processUserInput = () => {
	const rawData = document.querySelector("input").value;
	const cleanData = sanitizeInput(rawData);
	const h1 = document.querySelector("h1");
	h1.innerHTML = cleanData;
} =>createElement를 사용한 뒤 innerHTML을 사용하면 cross-site scripting xss 방어 가능

const sanitizeInput = (inputValue) =>{
	const div = document.createElement("div");
	div.textContent = inputValue;
	return div.innerHTML;
}

그냥 함수와 arrow function의 기능차이는 하나가 있는데 함수 안에서 this를 써야할 경우 
- 그냥 함수는 함수 안에서 this를 알맞게 재정의해준다.
- arrow function은 함수 안에서 this를 재정의해주지 않고 바깥에 있던 this를 그대로 쓴다.
그래서 이벤트리스너 콜백함수안에서 this를 써야하면 arrow function 쓰면 의도와 다르게 동작할 수도 있다. 그런데선 쓰지 말자.

insertBefore 문법 사용법
=> 부모노드.insertBefore(삽입 할 노드, 기준 점 노드);
=> prependChild와 동일한 동작을 하는 메서들를 구현할 수 있다.
HTML
<!DOCTYPE html>
<html>
<head>
  <title>||Working with elements||</title>
</head>
<body>
  <div id="div1">위의 텍스트는 동적으로 추가했습니다.</div>
</body>
</html>

JavaScript
document.body.onload = addElement;

function addElement () {
  // create a new div element
  var newDiv = document.createElement("div");
  // and give it some content
  var newContent = document.createTextNode("환영합니다!");
  // add the text node to the newly created div
  newDiv.appendChild(newContent);

  // add the newly created element and its content into the DOM
  var currentDiv = document.getElementById("div1");
  document.body.insertBefore(newDiv, currentDiv);
}

기존 element 이동 시
=>기존 부모 노드에서도 굳이 삭제 할 필요 없이 자동으로 이동하게 된다.
ex) 부모노드 1번에 위치하고 있을 때, 3번으로 옮기고 싶을 때 삭제하고 옮기지 않아도 된다.
노드는 자동적으로 기존 노드에서 삭제되고, 새로운 부모 밑에 삽입된다.
기준 점 노드를 null로 하게 되면, 자식 노드의 끝에 삽입 된다.
HTML
<ul class = "parent">
  <li class="newEle">+</li>
  <li class="ele">button</li>
  <li class="ele">button</li>
  <li class="ele">button</li>
  <li class="ele">button</li>
</ul>

JavaScript
let ele = document.querySelector('.newEle');
let parent = document.querySelector('.parent');
  
parent.insertBefore(ele, null); //맨 끝에 삽입
// parent.insertBefore(ele, parent.firstChild); //맨 앞에 삽입

https://velog.io/@ldaehi0205/Javascript-append-appendChild-prepend

appned
append는 appendChild와 다르게 자바스크립트 함수이다. 그래서 노드를 추가하는게 아니라 문자열도 추가가 가능하며 여러개 문자나 요소를 추가할 수 있다. 하지만 appendChild와 다르게 값을 리턴하지 않고 추가만 한다. 그래서 console.log로 찍어도 undefined가 출력된다.

appendChild처럼 요소를 만들지 않아도 바로 원하는 문자열을 삽입할 수 있다.
ex)
let li = document.createElement('li');
li.append('wecode');

여러개의 요소나 문자를 한번에 추가할 수 있다.
ex)
const div = document.createElement('div');
const span = document.createElement('span');

document.body.append(div,span,'hello');

prepend
append는 선택한요소 내부 맨뒤에 추가가 되지만 prepend는 맨 앞에 추가가 된다. append와 같이 문자열, 요소 추가가 가능하다.
.prepend('<div id="a"></div>);

after
after는 선택한 요소 바로 뒤에 추가된다.
.after('<div id="a"></div>);

before
before는 선택된 요소 앞에 삽입해준다
.before('<div id="a"></div>);